// ==========================================================================
// GRIDS MODULE
// ==========================================================================
//
// The grids module contains all of the horizontal layout properties of this
// project. The grid consists of (2) modules, .g and .g__col (abbr for grid and
// grid__column to ease legibility).
//
// (1) .g is the container that sets negative right margins so that grid columns
// donâ€™t need .first or .last classes appended.
//
// (2) .g__col is the column which sets the width of the module - these classes
// are generated by the _grids-build.scss utility.
//
// The number of columns and the size of the gutter can be configured in
// _grids-settings.scss.
//
//
// EXAMPLE
// <div class="g">
//      <div class="g__col">
//          @content
//      </div>
// </div>


// 1. DEPENDENCIES
// ==========================================================================

@import "grid-settings";
@import "grid-build";





// 2.DEFAULT GRID STYLES
// ==========================================================================

// GRID
// 1. Clears the .g__col floats within.
// 2. Default widths and margins which can change at larger breakpoints.
//

.g {
    @include pie-clearfix(); // [1]
    display: block;
    position: relative;

    margin-right: rem-calc(-$gutter); // [1]
    clear: both; // [2]

    @include respond-to("large and above") {
        margin-right: rem-calc(-$gutter--large); // [2]
    }
}

// GRID COLUMNS
// 1. Gives each column horizontal spacing.
// 2. At large sizes increase the gutter size.
//

.g__col {
    padding-right: rem-calc($gutter); // [3]
    float: left;
    width: 100%;
    @include respond-to("large and above") {
        padding-right: rem-calc($gutter--large); // [4]
    }
}
@media print {
    .g__col {
        width: auto !important;
    }
}
// Center columns, remove floats and other values.
.g__col--center {
    float: none;
    margin: 0 auto;
}


// 3.GRID CLASS GENERATOR
// ==========================================================================
// This module generates the grid modifier classes and includes the mixins above
// for each breakpoint.
//
// For instance
//
// .g__col--7--medium {
//  @include _grid-column(7, medium);
// }
//
// It takes options form the _grids-settings.scss in order to limit the number
// of classes it generates. You might only need columns 3, 8 and 9 to be
// created in one example.
//


@each $group, $config in $grids {

    $breakpoint:        map-get($config, breakpoint);
    $build-cols:        map-get($config, cols);
    $push-left-cols:    map-get($config, push-left);
    $push-right-cols:   map-get($config, push-right);
    $push-both-cols:    map-get($config, push-both);
    $directions:        map-get($config, directions );
    $col-count:         map-get($config, col-count);
    $nested:            map-get($config, nested);

    $group-name:        if($group == 'base', '', '--#{$group}');
    $col-count:         if($col-count, $col-count, $columns);


    // build columns
    // also adds classes for nested grid
    //
    // example
    //
    // .g__col--6,
    // .g__col--6-of-12
    @include _grid-respond-to($breakpoint) {
        @each $num in $build-cols {
            .g__col--#{$num}#{$group-name},
            .g__col--#{$num}-of-#{$col-count}#{$group-name} {
                @include _grid-column($num, $col-count);
            }
        }

        //push left
        @if $push-left-cols {
            @each $num in $push-left-cols {
                .g__push--left-#{$num}#{$group-name} {
                    @include _grid-push-left($num);
                }
            }
        }

        //push right
        @if $push-right-cols {
            @each $num in $push-right-cols {
                .g__push--right-#{$num}#{$group-name} {
                    @include _grid-push-right($num);
                }
            }
        }

        //push both
        @if $push-both-cols {
            @each $num in $push-both-cols {
                .g__push--both-#{$num}#{$group-name} {
                    @include _grid-push-both($num);
                }
            }
        }

        //align left/right floatage
        @if $directions {
            @each $direction in $directions {
                .g__col.g__align--#{$direction}#{$group-name} {
                    @include _grid-align-float($direction);
                }
            }
        }

        //
        // NESTED GRIDS
        //
        // example output:
        //
        // .g__col--3-of-12--largest {
        //      width: 25%;
        // }
        //

        @if $nested {
            // get the column values we want to be able to nest inside at this breakpoint
            $parents: map_keys($nested);

            @each $parent in $parents {
                // get the column values we want to be able to declare inside
                // this parent column
                $children: map-get($nested, $parent);

                // engage!
                @each $child in $children {
                    .g__col--#{$child}-of-#{$parent}#{$group-name} {
                        // set %age width, passing the parent column as context
                        @include _grid-column($child, $parent);
                    }
                }
            }
        }

        // build --all modifier columns for nested grids
        //
        // example
        //
        // .g__col--all--largest
        //

        .g__col--full#{$group-name} {
            @include _grid-all-columns();
        }
    }// @include _grid-respond-to
}// @each $group













